---
- name: Provision getlegit.co.uk vps
  hosts: getlegit
  become: yes
  vars_files:
    - ["roles/common/vars/family-{{ ansible_facts['os_family'] }}.yml"]
  roles:
    - role: common
    - role: debian-docker
    # - role: debian-harden
  vars_files: ./vars/getlegit.yml

  tasks:
    # TODO: rsync clone from ansible controller, taring?!?!?!
    # TODO: start mariadb service, restore database
    # TODO: restore database

    # UNTESTED
    - name: Copy ansible controller backup to target
      ansible.posix.synchronize:
        archive: yes
        compress: yes
        dest: "{{ restore_dir }}"
        mode: push
        src: /home/ansible/backup-getlegit
        rsync_path: /usr/bin/rsync

    - name: Create docker network network1
      community.docker.docker_network:
        attachable: no
        internal: no
        name: network1
        scope: local
        state: present

    - name: Create docker-compose persistent volumes
      community.docker.docker_volume:
        recreate: never # !!! changing this could OVERWRITE existing volumes !!!
        state: present
        volume_name: "{{ item }}"
      loop: "{{ docker_compose_volumes }}"

    - name: Mount new teamspeak volume(s). Restore files from backup
      community.docker.docker_container:
        cleanup: yes
        command: sh -c 'tar -xvf /restore/backups.tar backups/volumes/teamspeak/ -C / --strip-components=3'
        command_handling: correct
        detach: no
        image: alpine:latest
        interactive: no
        keep_volumes: no
        name: copy_files
        pull: yes
        restart: no
        restart_policy: "no"
        state: started
        volumes:
          - "{{ restore_dir }}/:/restore/"
          - teamspeak:/var/ts3server

    - name: Mount new znc volume(s). Restore files from backup
      community.docker.docker_container:
        cleanup: yes
        command: sh -c 'tar -xvf /restore/backups.tar backups/volumes/znc/ -C / --strip-components=3'
        command_handling: correct
        detach: no
        image: alpine:latest
        interactive: no
        keep_volumes: no
        name: copy_files
        pull: yes
        restart: no
        restart_policy: "no"
        state: started
        volumes:
          - "{{ restore_dir }}/:/restore/"
          - znc:/znc-data

    - name: Mount new wp_edmunds volume(s). Restore files from backup
      community.docker.docker_container:
        cleanup: yes
        command: sh -c 'tar -xvf /restore/backups.tar backups/volumes/wp_edmunds/ -C / --strip-components=3'
        command_handling: correct
        detach: no
        image: alpine:latest
        interactive: no
        keep_volumes: no
        name: copy_files
        pull: yes
        restart: no
        restart_policy: "no"
        state: started
        volumes:
          - "{{ restore_dir }}/:/restore/"
          - wp_edmunds:/var/www/html

    - name: Mount new caddy_reverse_proxy volume(s). Restore files from backup
      community.docker.docker_container:
        cleanup: yes
        command: sh -c 'tar -xvf /restore/backups.tar backups/volumes/caddy_reverse_proxy/ -C / --strip-components=3'
        command_handling: correct
        detach: no
        image: alpine:latest
        interactive: no
        keep_volumes: no
        name: copy_files
        pull: yes
        restart: no
        restart_policy: "no"
        state: started
        volumes:
          - "{{ restore_dir }}/:/restore/"
          - caddy_reverse_proxy_data:/data
          - caddy_reverse_proxy_config:/config

    - name: Mount new strapi_terse volume(s). Restore files from backup
      community.docker.docker_container:
        cleanup: yes
        command: sh -c 'tar -xvf /restore/backups.tar backups/volumes/strapi_terse/ -C / --strip-components=3'
        command_handling: correct
        detach: no
        image: alpine:latest
        interactive: no
        keep_volumes: no
        name: copy_files
        pull: yes
        restart: no
        restart_policy: "no"
        state: started
        volumes:
          - "{{ restore_dir }}/:/restore/"
          - strapi_terse:/srv/app

    - name: Mount new nextcloud_app_1 volume(s). Restore files from backup
      community.docker.docker_container:
        cleanup: yes
        command: sh -c 'tar -xvf /restore/backups.tar backups/volumes/nextcloud/ -C / --strip-components=3'
        command_handling: correct
        detach: no
        image: alpine:latest
        interactive: no
        keep_volumes: no
        name: copy_files
        pull: yes
        restart: no
        restart_policy: "no"
        state: started
        volumes:
          - "{{ restore_dir }}/:/restore/"
          - nextcloud_html:/var/www/html
          - nextcloud_data:/var/www/html/data

    - name: Generate ssh key for use with github
      community.crypto.openssh_keypair:
        comment: github/robinedmunds
        force: no # do not overwrite existing key
        group: docker
        mode: 0640
        owner: ansible
        path: /srv/keys/id_ed25519
        regenerate: never # do not overwrite existing key
        state: present
        type: ed25519
      register: output

    - ansible.builtin.debug:
        var: output

    - name: Clone robinedmunds/getlegit-docker-compose repo (read only)
      ansible.builtin.git:
        accept_newhostkey: yes
        update: yes
        clone: yes
        key_file: /srv/keys/id_ed25519
        remote: remote
        repo: git@github.com:robinedmunds/getlegit-docker-compose.git
        dest: "{{ compose_parent_dir }}"

    # TODO: needs .env file for mariadb to be copied to remote

    - name: Pull fresh mariadb image, start mariadb docker-compose service
      community.docker.docker_compose:
        pull: yes
        project_src: "{{ compose_parent_dir }}/mariadb"
        state: present
        stopped: no
      register: output

    - ansible.builtin.debug:
        var: output

    - name: Start temp mariadb container, connect to main db, restore backup
      community.docker.docker_container:
        cleanup: yes
        command: sh -c 'exec gunzip < /backup/all_databases.sql.gz | exec mysql --opt --host=mariadb_db_1 --user=root --password=$MYSQL_ROOT_PASSWORD'
        command_handling: correct
        detach: no
        env_file: MARIADB1_ENV_PATH
        image: mariadb:10.5
        interactive: no
        keep_volumes: no
        name: db_restore
        networks:
          - network1
        pull: yes
        restart: no
        restart_policy: "no"
        state: started
        volumes:
          - "{{ restore_dir }}/:/restore/"
